@using Fabstore.Domain.Models
@using FabstoreWebApplication.ViewModels
@using FabstoreWebApplication.Helpers

@model List<Product>


@{
    if (Model == null || Model.Count == 0){ 

        if (!string.IsNullOrEmpty(ViewData["Filter"] as string))
            {
            <div id="no-products">
                <h2>Oops! We couldn't find any products that match your filter</h2>
                <p>Try changing or clearing the filters to see more products.</p>
            </div>
            }
        else if (!string.IsNullOrEmpty(ViewData["Query"] as string))
            {
            <div id="no-products">
                <h2>No products found for "<span><strong>@ViewData["Query"]</strong></span>"</h2>
                <p>Try searching for something else.</p>
            </div>
            }
        return;
        }
   

     
    var colors = Model.AsParallel().SelectMany(p => p.Variants.Select(v => v.Color)).Distinct();
    var brands = Model.AsParallel().Select(p => p.Brand.BrandName).Distinct();
    // DEBUG START
    // var colors = Model
    //  .AsParallel()
    //  .SelectMany(p =>
    //  {
    //      Console.WriteLine($"_ProductList p {Thread.CurrentThread.ManagedThreadId} {Thread.CurrentThread.Name}");

    //      return p.Variants.Select(v =>
    //      {
    //          Console.WriteLine($"_ProductList v {Thread.CurrentThread.ManagedThreadId} {Thread.CurrentThread.Name}");
    //          return v.Color;
    //      });
    //  })
    //  .Distinct();
    // DEBUG END

}

@functions {
    public string GetRatingColors(int rating)
        {
        return rating switch
            {
                1 => "background-color:tomato; color:white;",
                2 => "background-color:orange; color:white;",
                3 => "background-color:yellow;",
                4 => "background-color:blue; color:white;",
                _ => "background-color:green; color:white;"
                };
        }
    }






    <!-- DROPDOWN MENU-->

 <div class="top-right-container">
<div class="clear-filter">
        <button class="clear-btn all" onclick="clearAll('@Url.Action("Index", "Product")')">Clear Filters</button>
</div>
<div class="dropdown">
    <button class="dropdown-toggle" onclick="toggleDropdown()">Filter & Sort By ▾</button>

    <div id="dropdown-menu" class="dropdown-menu hidden">
        <div class="section">
            <h4>Sort By</h4>
            <label>
                <input type="radio" name="sort" value="low-high" />
                Price: Low to High
            </label>
            <label>
                <input type="radio" name="sort" value="high-low" />
                Price: High to Low
            </label>
        </div>

        <div class="section">
            <h4>Filter By</h4>

            <div class="filter-group">
                <label>Color:</label>
                <select name="color">
                    <option value="all">All</option>
                            @foreach(var color in colors)
                                {
                                    <option value="@color">@StringHelper.CapitalizeEachWord(color)</option>
                                }
                    </select>
            </div>

            <div class="filter-group">
                <label>Brand:</label>
                <select name="brand">
                    <option value="all">All</option>
                        @foreach(var brand in brands)
                            {
                                <option value="@brand">@StringHelper.CapitalizeEachWord(brand)</option>
                            }
                    </select>
            </div>

            <div class="filter-group">
                    <label>Price Range: <span id="price-range-display">$5 - $500</span></label>
                    <input type="range" id="priceRange" min="5" max="500" step="10" value="500" oninput="updatePriceDisplay(this)">
            </div>
            <div class="filter-sort-btns">
                <button class="apply-btn all" onclick="handleApplyFilter()">Apply Filters</button>
            </div>
        </div>
    </div>
</div>
</div>

<!-- END OF DROPDOWN MENU-->


<!-- PRODUCT LISTING-->

<div id="search-result-feedback" style="display:none; width: 80%; margin: auto; margin-top: 20px;">
    <h2 id="search-result-feedback-content"></h2>
</div>
<div class="product-container">
    <div id="product-inner-container" class="product-inner-container">
        <! ------------ PRODUCTS WILL BE DYNAMICALLY CREATED ----------------- -->

        @foreach (var product in Model)
            {
            var primaryVariant = product.Variants?.FirstOrDefault();
            var primaryImage = primaryVariant?.Images?.FirstOrDefault(i => i.IsPrimary) ?? primaryVariant?.Images?.FirstOrDefault();
            var avgRating = (product.Reviews != null && product.Reviews.Count > 0)
            ? Math.Round(product.Reviews.Average(r => r.Rating))
            : 5; // Default rating if no reviews

            var ratingCount = product.Reviews?.Count ?? 0;
            var ratingColor = GetRatingColors(ratingCount);


            <div class="product-grid">
                <a asp-controller="Product" asp-action="Details" asp-route-category="@product.Category?.CategoryName" asp-route-id="@product.ProductID" target="_blank">
                    <div class="product-image">
                        <img src="@primaryImage?.ImageUrl" alt="@product.ProductName" />
                    </div>
                    <div class="product-information">
                        <h4>@StringHelper.CapitalizeEachWord(product.ProductName)</h4>
                        <p>@StringHelper.CapitalizeEachWord(product.Description)</p>
                        <p class="product-price">$@primaryVariant?.Price.ToString("0.00")</p>
                        <div class="ratings">
                            <span class="rating" style="@ratingColor">@avgRating★</span>
                            <span class="rating-count">@ratingCount ratings</span>
                        </div>
                    </div>
                </a>
            </div>
            }
    </div>
</div>